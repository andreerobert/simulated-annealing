# -*- coding: utf-8 -*-
"""Sample Simulated Annealing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wCgsuz8FFHbeuOZpi_4tpQJMd9jUYdHC
"""

import math
import random
import datetime

def main():
    model               = [ 'Holden Barina', 'Honda Civic', 'Nissan X-Trail', 'Hyundai Accent', 'Toyota Camry' ]
    time                = [ '5'            , '6'          , '7'             , '8'             , '9'            ]
    nationalities       = [ 'British'      , 'Canadian'   , 'Chinese'       , 'French'        , 'Indian'       ]
    colour              = [ 'Black'        , 'Blue'       , 'Green'         , 'Red'           , 'White'        ]
    destination         = [ 'Gold Coast'   , 'Newcastle'  , 'Port Macquarie', 'Sydney'        , 'Tamworth'     ]

    attributes = [model, time, nationalities, colour, destination]

    number_of_cars = 5
    initial = []
    
    for i in range(number_of_cars):
        initial.append([attr[i] for attr in attributes])    
    
    for car in initial:
        print(car)
    
    #generating initial random solution
    initial = get_random_neighbour(initial)
    
    print('Generating initial random solution:')
    for car in initial:
        print(car)
 
    startTime = datetime.datetime.now()
    print (str(startTime))
    
    #solving by simulated annealing
    solution, iterations , temp, current_cost = simulated_annealing(initial)

    print('Solved solution:')
    
    for car in solution:
        print(car)
        
    finalTime = datetime.datetime.now()
    print (str(finalTime))

    print('Number of iterations:', iterations)
    print(temp)
    print(current_cost)

def simulated_annealing(initial):
    current = initial
    current_cost = cost_function(current)
    
    #initializing the parameters: temperature, cooling
    temp = 10
    cool = 0.99
    num_iterations = 0

    while current_cost > 0:
        neighbour = get_random_neighbour(current)
        neighbour_cost = cost_function(neighbour)

        cost_delta = neighbour_cost - current_cost

        if cost_delta <= 0 or random.random() < math.exp(-cost_delta/temp):
            current, current_cost = neighbour, neighbour_cost

        num_iterations += 1
        if num_iterations % 500 == 0 and temp > 0.20:
            temp -= 0.05
            
    return current, num_iterations, temp, current_cost
    
mod = 0
tim = 1
nat = 2
col = 3
des = 4

def cost_function(state):
    #the goal is to reduce the cost to zero (minimizing cost)
    cost = 15
    for i, h in enumerate(state):
        cost -= sum([
            h[mod] == 'Toyota Camry' and h[tim] == '6' and h[nat] == 'British',
            i == 2 and h[col] == 'Black',
            h[mod] == 'Hyundai Accent' and h[tim] == '9',
            i < 4 and h[mod] == 'Holden Barina' and h[col] == 'Blue' and state[i+1][nat] == 'British',
            i > 0 and h[des] == 'Gold Coast' and state[i-1][nat] == 'French',
            h[mod] == 'Nissan X-Trail' and h[des] == 'Sydney',
            i > 0 and h[col] == 'Green' and state[i-1][nat] == 'Chinese',
            h[des] == 'Newcastle' and h[tim] == '5',
            i > 0 and h[mod] == 'Honda Civic' and h[tim] == '7' and state[i-1][des] == 'Gold Coast',
            h[col] == 'Red' and h[des] == 'Tamworth',
            h[tim] == '7' and state[i-1][col] == 'White',
            i == 4 and h[nat] == 'Indian',
            h[col] == 'Black' and h[tim] == '8',
            i > 0 and h[nat] == 'Indian' and state[i-1][nat] == "Chinese",
            h[des] == 'Tamworth' and h[tim] == '6'
        ])
    return cost
    
def get_random_neighbour(state):
    neighbour = [house[:] for house in state] # Deep copy

    i, j = random.sample(range(5), 2)
    attr_idx = random.randint(0, 4)

    neighbour[i][attr_idx], neighbour[j][attr_idx] = neighbour[j][attr_idx], neighbour[i][attr_idx]
    return neighbour


if __name__ == "__main__":
    main()